Fungsi-Fungsi : 
1. File .txt -> Graf
    - Input File Directory (Menampilkan Explorer)
        inp : (button click)
        out : path file
    - Read File
        inp : path file
        out : isi file
    - Convert isi file ke bentuk Graf
        inp : isi file
        out : Graf 

2. DFS Friend Recommendation
    - Membentuk list rekomendasi
        inp : Graf
        out : List

3. DFS Explore Friend
    - Membentuk list -> lintasan Explore
        inp : Graf
        out : List

4. BFS Friend Recommendation
    - Membentuk list rekomendasi
        inp : Graf
        out : List

5. BFS Explore Friend
    - Membentuk List -> lintasan Explore 
        inp : Graf
        out : List

6. GUI (Output hasil algoritma ke bentuk  GUI)
    - Design UI (UI dan tata letaknya)
        inp : 
        out :
    - Visualisai Graf
        inp : Graf
        out : Image
    - Visualisai list rekomendasi (Bisa di scroll)
        inp : List
        out : Tampilan rekomendasi
    - Visualisai list (lintasan Explore)
        inp : List
        out : Tampilan lintasan

7. Logika Main Program
    - Respon Event (graph file, algorithm, chooseAccount, explore friends, submit)
    - Drop down graf node
        inp : graf
        out : node (drop down)
    
    
    1. Browse_Click
    2. reset(layar) // yang ditampilkan cuma s1
    3. input(file)

    if (file/graf valid) :
    4.   tampilkan s2, loncat ke 6
    else
    5.   tampilkan pesan error, balik ke langkah 1

    6. Visualisai graf
    7. Pilih Algorithm
    8. pilih dropdown
    9. pilih submit
    10. tampilkan explore dan rekomendasi

    jika di tahap 6 sampai 10, user melakukan langkah 1, maka balik lagi ke atas
    

Implementasi Graf
1. file .txt
    1. numOfEdge
    2. node1, node2

2. Program
//////////////
    array of node;

    struct Edge
        index node1 
        index node2
    
    Graf = array of Edge
////////////////
    <DIPILIH>
    [a, b, c, d, e, f, g, h]
    [3, 6, 4, 3, 3, 5, 2, 2]
    
    [1, 1, 1, 1, 0, 1, 1, 0]

    0 : [1, 2, 3] 
    1 : [0, 2, 4, 5, 6, 1]
    2 : [0, 1, 5, 6]
    3 : [0, 5, 6]
    4 : [1, 5, 7]
    5 : [1, 2, 3, 4, 7]
    6 : [2, 3]
    7 : [3, 4]

    {[b,c,d], [a c e f g], [a b f g], .....}
    
in c++
class Graph
{
    private:
        int numOfNode;
        string *node;
        int *numOfConnectedNode; // 
        int *connectedNode; // (numOfNode*numOfNode)
    
    public:
        Graph(int);
        Graph(const Graph&);
        Graph& operator=(const Graph&);
        ~Graph();
        void addNode(string nod);
        string getNode(int idxNode);
        void addConnectedNode(int idxNode, int idxConnectNode);
        int getNumOfNode();
        int getNumOfConnectedNode(int idxNode);
        int getIdxConnectedNode(int idxNode, int idxConnect);
        string getConnectedNode(int idxNode, int idxConnect);
        void printGraph();
}



List rekomendasi
    - Bisa menggunakan Implementasi graf di atas.

Lintasan Eksplorasi
    -array of node
    - lintasan [2, 0, 3, 1, 2]

    index 0 : degree
    index 1-... : Lintasan


    